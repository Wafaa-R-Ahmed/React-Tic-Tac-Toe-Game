{"version":3,"sources":["components/Square/Square.js","components/Board/Board.js","components/App.js","serviceWorker.js","index.js"],"names":["Square","props","className","onClick","value","Board","state","squares","Array","fill","stepNumber","xIsNext","status","winner","i","this","_state","checkWinner","setState","lines","length","a","b","c","key","clickHandle","n","push","populateSquare","populateSquares","reset","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qUAGe,SAASA,EAAOC,GAC7B,OACC,4BAAQC,UAAU,gBAAgBC,QAASF,EAAME,SAC9CF,EAAMG,O,ICFSC,E,kDACnB,WAAYJ,GAAQ,IAAD,8BACjB,cAAMA,IACDK,MAAQ,CACXC,QAASC,MAAM,GAAGC,KAAK,MACvBC,WAAY,EACZC,SAAS,EACTC,OAAQ,KACRC,OAAQ,MAPO,E,wDAWPC,GACV,GAA8B,OAA1BC,KAAKT,MAAMC,QAAQO,IAAqC,OAAtBC,KAAKT,MAAMO,OAAiB,CAChE,IAAIG,EAASD,KAAKT,MAElBU,EAAOT,QAAQO,GAAKE,EAAOL,QAAU,IAAM,IAC3CK,EAAOL,SAAWK,EAAOL,QACzBK,EAAON,aACPM,EAAOH,OAASE,KAAKE,YAAYD,EAAOT,SAEpCS,EAAOH,OACTG,EAAOJ,OAAS,iBAAmBI,EAAOH,OAAS,IAE5CG,EAAON,WAAa,EAC3BM,EAAOJ,OAAS,eAEhBI,EAAOJ,QAAUI,EAAOL,QAAU,MAAQ,OAAS,WAErDI,KAAKG,SAASF,M,kCAINT,GAWV,IAVA,IAAMY,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEAL,EAAI,EAAGA,EAAIK,EAAMC,OAAQN,IAAK,CAAC,IAAD,cACnBK,EAAML,GADa,GAC9BO,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAErC,GAAIhB,EAAQc,IAAMd,EAAQc,KAAOd,EAAQe,IAAMf,EAAQc,KAAOd,EAAQgB,GACpE,OAAOhB,EAAQc,GAGnB,OAAO,O,8BAIPN,KAAKG,SAAS,CACZX,QAASC,MAAM,GAAGC,KAAK,MACvBC,WAAY,EACZC,SAAS,EACTC,OAAQ,KACRC,OAAQ,S,qCAIGC,GAAI,IAAD,OAChB,OACE,kBAAC,EAAD,CACEU,IAAK,UAAYV,EACjBV,MAAOW,KAAKT,MAAMC,QAAQO,GAC1BX,QAAS,kBAAM,EAAKsB,YAAYX,Q,sCAKtBY,GAEd,IADA,IAAInB,EAAU,GACLO,EAAIY,EAAGZ,EAAIY,EAAI,EAAGZ,IACzBP,EAAQoB,KAAKZ,KAAKa,eAAed,IAEnC,OAAOP,I,+BAGC,IAAD,OACP,OACE,yBAAKL,UAAU,QACb,yBAAKA,UAAU,SACb,yBAAKA,UAAU,aAAaa,KAAKc,gBAAgB,IACjD,yBAAK3B,UAAU,aAAaa,KAAKc,gBAAgB,IACjD,yBAAK3B,UAAU,aAAaa,KAAKc,gBAAgB,KAEnD,yBAAK3B,UAAU,UACb,4BAAKa,KAAKT,MAAMM,QACO,OAAtBG,KAAKT,MAAMO,QAAmBE,KAAKT,MAAMI,WAAa,EACtD,4BAAQP,QAAS,WAAK,EAAK2B,UAA3B,SAAuD,W,GA5F/BC,IAAMC,WCW1BC,MAXf,WACE,OACE,yBAAK/B,UAAU,OACb,4BAAQA,UAAU,cAAlB,eAGA,kBAAC,EAAD,QCEcgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d913b152.chunk.js","sourcesContent":["import React from 'react';\nimport './Square.css';\n\nexport default function Square(props) {\n  return (\n   <button className=\"square-button\" onClick={props.onClick}>\n     {props.value}\n   </button>\n  );\n}\n\n","import React from 'react';\nimport './Board.css';\nimport Square from '../Square/Square.js'\n\nexport default class Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      squares: Array(9).fill(null),\n      stepNumber: 0,\n      xIsNext: true,\n      status: null,\n      winner: null\n    };\n  }\n\n  clickHandle(i) {\n    if (this.state.squares[i] === null && this.state.winner === null) {\n      let _state = this.state;\n\n      _state.squares[i] = _state.xIsNext ? \"X\" : \"O\";\n      _state.xIsNext = !_state.xIsNext;\n      _state.stepNumber++;\n      _state.winner = this.checkWinner(_state.squares);\n\n      if (_state.winner) {\n        _state.status = \"The winner is \" + _state.winner + \"!\";\n      }\n      else if (_state.stepNumber > 8)\n        _state.status = \" It's a tie!\";\n      else\n        _state.status = (_state.xIsNext ? \"X's\" : \"O's\") + \" turn :)\";\n\n      this.setState(_state);\n    }\n  }\n\n  checkWinner(squares) {\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6]\n    ];\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        return squares[a];\n      }\n    }\n    return null;\n  }\n\n  reset() {\n    this.setState({\n      squares: Array(9).fill(null),\n      stepNumber: 0,\n      xIsNext: true,\n      status: null,\n      winner: null\n    });\n  }\n\n  populateSquare(i) {\n    return (\n      <Square\n        key={\"square \" + i}\n        value={this.state.squares[i]}\n        onClick={() => this.clickHandle(i)}\n      />\n    );\n  }\n\n  populateSquares(n) {\n    let squares = [];\n    for (let i = n; i < n + 3; i++) {\n      squares.push(this.populateSquare(i));\n    }\n    return squares;\n  }\n\n  render() {\n    return (\n      <div className=\"game\">\n        <div className=\"board\">\n          <div className=\"board-row\">{this.populateSquares(0)}</div>\n          <div className=\"board-row\">{this.populateSquares(3)}</div>\n          <div className=\"board-row\">{this.populateSquares(6)}</div>\n        </div>\n        <div className=\"status\">\n          <h1>{this.state.status}</h1>\n          {this.state.winner !== null || this.state.stepNumber > 8 ? \n          (<button onClick={()=>{this.reset()}}>Reset</button>) : null}\n        </div>\n      </div>);\n  }\n}\n\n","import React from 'react';\nimport './App.css';\nimport Board from './Board/Board.js'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        Tic Tac Toe\n      </header>\n      <Board></Board>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}